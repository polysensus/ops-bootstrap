version: '3'
vars:
  PROJECT_PREFIX: '{{.PROJECT_PREFIX | default (.USER_WORKING_DIR | osBase | upper) | replace "-" "_" }}'

tasks:

  default:
    - task: help

  show:
    desc: show the effective environment
    dotenv:
      # Priority is first listed in preference to subsequent
      - '{{.USER_WORKING_DIR}}/.env'
      - '{{.USER_WORKING_DIR}}/.env.secrets'
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - |
        clones_var_name="${{.PROJECT_PREFIX}}_GIT_CLONES_SSH"
        echo "The following .env files are being used:
        - {{.USER_WORKING_DIR}}/.env
        - {{.USER_WORKING_DIR}}/.env.secrets

        PROJECT_PREFIX: '{{.PROJECT_PREFIX}}'
        {{.PROJECT_PREFIX}}_GIT_CLONES_SSH="${clones_var_name}"\
        "

  help:
    desc: extended help and reminders
    dotenv:
      # Priority is first listed in preference to subsequent
      - '{{.USER_WORKING_DIR}}/.env'
      - '{{.USER_WORKING_DIR}}/.env.secrets'
    dir: '{{.USER_WORKING_DIR}}'

    cmds:
      - |
        clones_var_name="${{.PROJECT_PREFIX}}_GIT_CLONES_SSH"
        echo "{{.PROJECT_PREFIX}}_GIT_CLONES_SSH="${clones_var_name}"
      
        NOTICE: This command acts in the directory task was run from


        To configure repositories to clone, create a variable {{.PROJECT_PREFIX}}_GIT_CLONES_SSH in your environment.

        The following control is offered:
        - Clone a repository with a specific tag by appending '@' to the clone directory name
        - Clone a repository with a specific clone directory name by appending '#' to the repository URL

        Example entries:
        - plain clone: git@github.com:org/repo.git  
        - clone with tag: git@github.com:org/repo.git@v1.0.0
        - clone with directory: git@github.com:tenetxyz/mud.git#tenetxyz-mud
        - clone with directory and tag: git@github.com:tenetxyz/mud.git#tenetxyz-mud@v1.0.0

        Note that tags can contain '@', only the first '@' is used to split the tag from the directory name

        Example env var with all features:

          {{.PROJECT_PREFIX}}_GIT_CLONES_SSH=\"\\
          git@github.com:latticexyz/phaserx.git \\
          git@github.com:latticexyz/phaserx.git@v1.2.3 \\
          git@github.com:latticexyz/mud.git#latticexyz-mud \\
          git@github.com:latticexyz/mud.git#latticexyz-mud@create-mud@2.2.14 \\
          \"
        "

  clone:
    desc: clone any missing repositories from
    dotenv:
      # Priority is first listed in preference to subsequent
      - '{{.USER_WORKING_DIR}}/.env'
      - '{{.USER_WORKING_DIR}}/.env.secrets'
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - |
        for item in ${{.PROJECT_PREFIX}}_GIT_CLONES_SSH; do

          name="$(basename ${item%.git})"

          repo=${item%%#*}
          clone_dir=${item#*#}
  
          # If there's no '#', default the clone_dir to name (as git would do automatically)
          [ "$repo" = "$clone_dir" ] && clone_dir="$name"

          # Checkout a specific tag if '@' is present
          if [[ "$clone_dir" == *"@"* ]]; then

            # Split on the first '@'
            clone_dir_base=${clone_dir%%@*}
            clone_dir_tag=${clone_dir#*@}

            if [[ ! -d $clone_dir_base ]]; then
              git clone $repo $clone_dir_base
              cd $clone_dir_base
              git checkout $clone_dir_tag
            else
              echo "$item already cloned $item, delete manually to re-clone"
            fi
          else
            if [[ ! -d $clone_dir ]]; then
              git clone $repo $clone_dir
            else
              echo "$item already cloned $item, delete manually to re-clone"
            fi
          fi
          
        done
        exit 0